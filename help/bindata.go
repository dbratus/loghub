package help

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func content_get_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x94,
		0xcd, 0x6e, 0xdb, 0x38, 0x10, 0x80, 0xef, 0x7a, 0x8a, 0x01, 0x4f, 0xbb,
		0x80, 0x25, 0xd0, 0x76, 0x9c, 0x6c, 0x7c, 0x0b, 0xb2, 0x9b, 0x45, 0x76,
		0xe1, 0xa0, 0x68, 0x9c, 0x1e, 0x72, 0x29, 0x68, 0x69, 0x24, 0x11, 0xe5,
		0x8f, 0xca, 0x9f, 0xc4, 0x7e, 0xb0, 0xbe, 0x40, 0x9f, 0xac, 0x43, 0xc9,
		0xb2, 0xf3, 0xe3, 0xa0, 0x3e, 0xc8, 0x02, 0xf9, 0xf1, 0x9b, 0xe1, 0x50,
		0xc3, 0xec, 0x06, 0x43, 0xd9, 0xa2, 0x07, 0x65, 0x1b, 0x0f, 0xb5, 0xb3,
		0x1a, 0x44, 0x7a, 0x07, 0xeb, 0xa0, 0x8d, 0x9b, 0x22, 0xcb, 0xd6, 0x2d,
		0x42, 0xee, 0x5d, 0x09, 0x9d, 0x70, 0x42, 0x63, 0x40, 0x07, 0xd2, 0x13,
		0x54, 0x5a, 0xad, 0x05, 0x78, 0x4c, 0xc3, 0x01, 0x2b, 0x50, 0xd2, 0x07,
		0xb0, 0x35, 0x38, 0x6c, 0x70, 0xdb, 0x79, 0xf0, 0x1d, 0x96, 0xb2, 0xde,
		0x49, 0xd3, 0x40, 0x20, 0x45, 0x72, 0x7a, 0x1b, 0x5d, 0x49, 0xb1, 0x9e,
		0x5b, 0x59, 0xb6, 0xa0, 0x23, 0x2d, 0xd8, 0x20, 0x48, 0x53, 0xaa, 0x58,
		0x91, 0x41, 0x9a, 0x60, 0x7b, 0xd6, 0xa1, 0x8f, 0x2a, 0x14, 0x70, 0x5b,
		0x0f, 0x91, 0x29, 0x9e, 0xb1, 0x61, 0x6f, 0x94, 0x58, 0x4d, 0x40, 0x28,
		0xf5, 0xca, 0x28, 0xdc, 0xd1, 0x33, 0xe6, 0xec, 0x84, 0x69, 0xf0, 0xb0,
		0x28, 0xa5, 0x1c, 0xa4, 0x26, 0x79, 0x3f, 0xec, 0x50, 0x89, 0x20, 0x9f,
		0x10, 0x28, 0x64, 0xbe, 0x11, 0x1e, 0x0b, 0x58, 0x5b, 0x68, 0x30, 0x00,
		0x9a, 0xe0, 0x12, 0xbe, 0xc1, 0xda, 0x92, 0xb5, 0x9f, 0x9c, 0x80, 0xc1,
		0x66, 0xe0, 0x47, 0x6d, 0x6b, 0xa3, 0xaa, 0x52, 0xfa, 0x87, 0xac, 0x5e,
		0xc7, 0x1d, 0x77, 0x27, 0xe0, 0x5f, 0x0b, 0x55, 0xa4, 0x1a, 0x49, 0x6b,
		0xc0, 0x93, 0xdb, 0x34, 0x4b, 0x60, 0x57, 0x6f, 0xc7, 0x86, 0xa2, 0x76,
		0xd6, 0x7b, 0xb9, 0x51, 0x3b, 0xf0, 0xb2, 0x31, 0x54, 0x12, 0x8f, 0xdf,
		0x23, 0x9a, 0x12, 0x53, 0x61, 0x2b, 0x8a, 0xa3, 0x85, 0x02, 0x13, 0xf5,
		0x06, 0x9d, 0x9f, 0x00, 0x0a, 0xaa, 0xe2, 0xb3, 0x0c, 0x2d, 0xd8, 0x2e,
		0x99, 0x68, 0xae, 0x76, 0xa2, 0xec, 0xa5, 0xc2, 0x54, 0xa4, 0x8b, 0x46,
		0x52, 0xd9, 0x62, 0x5d, 0xcb, 0xed, 0x84, 0xfe, 0x09, 0x17, 0x1e, 0xd8,
		0x9c, 0x73, 0xed, 0xd9, 0x04, 0x58, 0x3e, 0x2d, 0x16, 0x2d, 0x4b, 0x47,
		0xcd, 0x66, 0xed, 0xd9, 0x42, 0xb3, 0x02, 0xbe, 0x08, 0x25, 0xab, 0xa1,
		0x50, 0x69, 0xf1, 0x50, 0x59, 0x66, 0x7a, 0x3c, 0x7a, 0x06, 0x7f, 0x24,
		0xf8, 0xe7, 0x0f, 0xcf, 0xfe, 0xa4, 0x81, 0xc1, 0xd2, 0x3f, 0x74, 0x7a,
		0xb4, 0xac, 0x60, 0x59, 0xf6, 0xcf, 0x56, 0xe8, 0x4e, 0x51, 0x05, 0x29,
		0xe7, 0x3c, 0xf8, 0x5a, 0x07, 0x78, 0x12, 0x2a, 0xe2, 0x32, 0xcb, 0xae,
		0xee, 0xee, 0x6f, 0xaf, 0x61, 0xf8, 0xb1, 0x15, 0xa5, 0xf9, 0x9f, 0x30,
		0xf0, 0x75, 0x06, 0xd3, 0xc5, 0x92, 0x9f, 0x2d, 0xf9, 0x02, 0x66, 0x9c,
		0x9f, 0xb3, 0xec, 0xc1, 0xc8, 0xed, 0xdf, 0xf4, 0x51, 0x7d, 0x88, 0xad,
		0xee, 0xd7, 0x7b, 0xf4, 0x73, 0xdc, 0xec, 0xde, 0xa1, 0xfc, 0x05, 0x9a,
		0xf3, 0x0b, 0xce, 0x47, 0xf8, 0xe6, 0xfa, 0xaf, 0xd9, 0x6c, 0x1f, 0x9e,
		0xa0, 0x9e, 0x3d, 0x1f, 0xd8, 0xe4, 0x1c, 0x89, 0xc7, 0xd3, 0x44, 0xaf,
		0x1a, 0x98, 0x05, 0x3f, 0x6e, 0xa2, 0x12, 0xbb, 0x09, 0x85, 0xcc, 0x89,
		0xcd, 0x47, 0x76, 0x9f, 0x64, 0x0f, 0x4f, 0xa7, 0xb3, 0xf9, 0x01, 0x4e,
		0x64, 0x6f, 0x4d, 0x19, 0x9d, 0x66, 0x1f, 0x7f, 0xc3, 0x1e, 0xd3, 0x98,
		0xcf, 0xe7, 0x97, 0x83, 0x39, 0x11, 0x39, 0x9f, 0xe6, 0x7c, 0xb6, 0x1e,
		0xb9, 0x47, 0x7e, 0xb1, 0x7c, 0xc1, 0xdd, 0x09, 0x63, 0x4f, 0x72, 0xc5,
		0xe5, 0xf8, 0x1b, 0x57, 0xfc, 0x2f, 0xd3, 0x95, 0x60, 0x06, 0xf3, 0x9c,
		0xa8, 0x4f, 0x2b, 0x96, 0xdd, 0x07, 0x3a, 0xd5, 0xf1, 0xe8, 0xde, 0x9c,
		0xc7, 0x7e, 0x76, 0x25, 0x95, 0x92, 0xef, 0x67, 0x0b, 0x9e, 0xa4, 0x7b,
		0xa2, 0x74, 0xf6, 0x34, 0x71, 0x84, 0xfa, 0x4c, 0x3f, 0x84, 0x7a, 0x2e,
		0x7b, 0xf0, 0xa9, 0x65, 0xfa, 0x0f, 0xcc, 0xa5, 0x46, 0xab, 0x95, 0xa0,
		0x0e, 0x32, 0xd0, 0x39, 0x5b, 0xc5, 0xa1, 0x03, 0xb4, 0xad, 0x5e, 0xb6,
		0xa9, 0x78, 0xb2, 0x32, 0x5d, 0x0e, 0xb0, 0x6e, 0xa9, 0xd3, 0x7a, 0xde,
		0x76, 0x68, 0xfc, 0xe1, 0x72, 0xda, 0xdf, 0x3d, 0x4c, 0xd3, 0xce, 0xc9,
		0x94, 0xde, 0xb5, 0xac, 0x2a, 0x85, 0x0c, 0x44, 0x08, 0xa2, 0xfc, 0x56,
		0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xda, 0xd7, 0xa2, 0xad, 0x2c, 0x05,
		0x00, 0x00,
		},
		"content/get.txt",
	)
}

func content_help_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x01, 0x00,
		0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		"content/help.txt",
	)
}

func content_hub_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x34, 0xcd,
		0x41, 0x12, 0xc2, 0x20, 0x0c, 0x85, 0xe1, 0x7d, 0x4f, 0xf1, 0xa6, 0x7b,
		0xb9, 0x8c, 0x7a, 0x00, 0xda, 0xa4, 0x90, 0x11, 0x48, 0x87, 0x04, 0xcf,
		0xaf, 0xc5, 0x71, 0xf7, 0x16, 0xdf, 0xbc, 0x7f, 0xb9, 0x7b, 0xec, 0x6e,
		0x28, 0x9a, 0xf2, 0xd8, 0x20, 0x0d, 0x9e, 0x19, 0xd7, 0xac, 0x4a, 0x1c,
		0x96, 0xe5, 0x69, 0xd2, 0x12, 0xf4, 0xc0, 0xcd, 0xfb, 0x30, 0xc7, 0x51,
		0x62, 0xba, 0xd8, 0xd9, 0x95, 0xc6, 0xee, 0xa2, 0x6d, 0x4a, 0x58, 0xd6,
		0x51, 0x08, 0x1b, 0x23, 0xbe, 0x55, 0x88, 0x29, 0xe0, 0x91, 0xc5, 0x7e,
		0x5e, 0x4f, 0x6e, 0x36, 0x9f, 0xbf, 0x1d, 0xb8, 0xce, 0xb9, 0x56, 0x6e,
		0xff, 0x60, 0x15, 0xa2, 0xc2, 0x2b, 0xa2, 0x7b, 0xdc, 0x5f, 0xe1, 0x13,
		0x00, 0x00, 0xff, 0xff, 0x00, 0x6c, 0xbf, 0xf2, 0x96, 0x00, 0x00, 0x00,
		},
		"content/hub.txt",
	)
}

func content_log_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x4c, 0x91,
		0x41, 0xb2, 0xe3, 0x30, 0x08, 0x44, 0xf7, 0x39, 0x05, 0xf5, 0xd7, 0x93,
		0xdc, 0x63, 0xd6, 0xc9, 0x1c, 0x00, 0x4b, 0xd8, 0xa2, 0x22, 0x09, 0x97,
		0x84, 0xe2, 0xf2, 0xed, 0x07, 0x1c, 0xff, 0x54, 0x76, 0xc6, 0xd0, 0xcd,
		0x53, 0x73, 0xb9, 0x2b, 0x36, 0xed, 0x90, 0x65, 0x49, 0x63, 0x02, 0xae,
		0xa0, 0x89, 0xbc, 0x82, 0x22, 0x91, 0x6e, 0x97, 0xcb, 0xc3, 0xca, 0x6b,
		0xe6, 0xae, 0x54, 0x61, 0xc5, 0x86, 0x85, 0x94, 0x1a, 0x94, 0xd1, 0x15,
		0x30, 0x6f, 0xb8, 0x77, 0xd3, 0x84, 0x3c, 0x22, 0x01, 0xaf, 0x20, 0x0d,
		0x92, 0x58, 0x67, 0xda, 0x61, 0x4b, 0x1c, 0xd2, 0xc7, 0x2c, 0x60, 0x85,
		0x89, 0x00, 0x43, 0xa0, 0xde, 0x29, 0x42, 0xa3, 0x22, 0x4a, 0x79, 0xbf,
		0xc1, 0x23, 0x71, 0x07, 0x8c, 0xb1, 0x59, 0x03, 0xec, 0xb3, 0x53, 0x8d,
		0xa0, 0x72, 0x28, 0x9d, 0x08, 0xad, 0xdc, 0x38, 0x67, 0x97, 0x0f, 0x97,
		0x5a, 0x2f, 0x48, 0xad, 0x14, 0xf4, 0xd7, 0xdd, 0x28, 0xff, 0xaa, 0x6b,
		0xb9, 0xac, 0xd2, 0x14, 0xab, 0x1e, 0x06, 0xf8, 0x34, 0xa6, 0x6a, 0x5f,
		0xb6, 0x55, 0x86, 0xff, 0x4c, 0x78, 0x6a, 0xb8, 0xb0, 0x42, 0x5f, 0x29,
		0xf0, 0xcc, 0x66, 0x69, 0xb8, 0xfa, 0x7e, 0x66, 0xf9, 0x7a, 0xa3, 0x73,
		0x41, 0x97, 0x59, 0xdf, 0xf3, 0x8e, 0x7a, 0x26, 0x83, 0xbb, 0x23, 0x28,
		0xd7, 0x41, 0xbe, 0x69, 0x69, 0xb2, 0x01, 0x4e, 0xf2, 0xb2, 0x7d, 0x36,
		0x76, 0x97, 0x3f, 0xe0, 0xf6, 0x49, 0x46, 0x8e, 0x8e, 0xdd, 0xc9, 0x2c,
		0x64, 0x33, 0x4b, 0x23, 0x78, 0x07, 0x1c, 0xb9, 0x3f, 0x2d, 0x94, 0x15,
		0x03, 0xeb, 0x6e, 0xfc, 0xff, 0x3a, 0xd7, 0x05, 0x64, 0x86, 0xab, 0x36,
		0x8f, 0x76, 0xce, 0xb8, 0xf8, 0x31, 0xd6, 0x26, 0x71, 0x04, 0x65, 0xa9,
		0xc7, 0x3d, 0xbe, 0x4c, 0xf1, 0x25, 0x1c, 0x29, 0x9e, 0x01, 0x1e, 0xf3,
		0xb2, 0x52, 0xed, 0x9f, 0xc8, 0xcf, 0x0c, 0x7f, 0x8a, 0x1d, 0xee, 0x3c,
		0x6b, 0xe1, 0x18, 0x33, 0xfd, 0x00, 0xaa, 0x62, 0x78, 0xde, 0xfe, 0x07,
		0x00, 0x00, 0xff, 0xff, 0xb8, 0xd2, 0x01, 0xeb, 0xfc, 0x01, 0x00, 0x00,
		},
		"content/log.txt",
	)
}

func content_pass_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x24, 0xcd,
		0xb1, 0xad, 0xc3, 0x30, 0x0c, 0x84, 0xe1, 0xde, 0x53, 0x1c, 0xdc, 0xbc,
		0xea, 0x79, 0x89, 0xac, 0x90, 0x0c, 0xc0, 0x98, 0xb4, 0x45, 0x44, 0x26,
		0x05, 0x91, 0x4a, 0xd6, 0x0f, 0x1c, 0x77, 0x5f, 0x71, 0xb8, 0x7f, 0xba,
		0x15, 0x32, 0x09, 0x64, 0x11, 0x8c, 0x90, 0xfe, 0x17, 0x68, 0x14, 0xf1,
		0xf1, 0xce, 0xcb, 0x34, 0x3d, 0x42, 0x6d, 0x87, 0x6f, 0xf8, 0xcf, 0x3e,
		0x22, 0xb1, 0x55, 0xda, 0xa1, 0x86, 0xd6, 0x9d, 0xc7, 0x9a, 0xea, 0x86,
		0xc3, 0x59, 0x10, 0xc5, 0x47, 0x65, 0x3c, 0x05, 0xf4, 0x76, 0x65, 0xe1,
		0x05, 0xf7, 0xa2, 0x71, 0xed, 0xbd, 0x89, 0x5d, 0x81, 0xea, 0x3b, 0xd2,
		0x7f, 0x9c, 0x0f, 0xb1, 0xf3, 0xe9, 0xf4, 0xa1, 0xcc, 0x55, 0x66, 0x50,
		0x26, 0xad, 0xaf, 0xe5, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x51, 0xb7,
		0x68, 0x93, 0x00, 0x00, 0x00,
		},
		"content/pass.txt",
	)
}

func content_put_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x44, 0x91,
		0xcf, 0x4e, 0xf3, 0x40, 0x0c, 0xc4, 0xcf, 0xdf, 0x3e, 0x85, 0x95, 0x73,
		0xff, 0x7c, 0x42, 0xea, 0xa5, 0x42, 0xbd, 0x71, 0x00, 0x89, 0x82, 0xd4,
		0x72, 0x42, 0x1c, 0x36, 0x59, 0x27, 0x59, 0x91, 0x5d, 0x47, 0x6b, 0xa7,
		0x10, 0x21, 0xde, 0x1d, 0x3b, 0x95, 0xe0, 0xd4, 0x95, 0x67, 0xec, 0xce,
		0xfc, 0xe2, 0x9e, 0x27, 0x61, 0xf0, 0x30, 0x44, 0x16, 0xa0, 0x16, 0x30,
		0x4b, 0x89, 0xc8, 0x20, 0x64, 0x43, 0xea, 0x36, 0xce, 0xdd, 0x67, 0x90,
		0x3e, 0x32, 0x24, 0x0a, 0x68, 0xa3, 0x7e, 0xaa, 0xa1, 0xa0, 0x0f, 0x0c,
		0x2c, 0x21, 0x66, 0x5d, 0xcd, 0x08, 0xf5, 0x7c, 0xfd, 0x1d, 0x7d, 0xe1,
		0x98, 0x3b, 0x40, 0xdf, 0xf4, 0xd7, 0x89, 0xb7, 0xf3, 0x0f, 0xa7, 0xa7,
		0xa3, 0x9d, 0x97, 0x1e, 0xa1, 0xa5, 0x61, 0xa0, 0x0f, 0x33, 0xb5, 0x54,
		0x92, 0x97, 0xbd, 0x73, 0x5f, 0xee, 0x5f, 0x75, 0xc2, 0x4b, 0xb5, 0x87,
		0x5b, 0xc6, 0x0b, 0x96, 0x28, 0xf3, 0x01, 0x00, 0xb6, 0xdb, 0xe3, 0x94,
		0x6a, 0x2c, 0xf0, 0xfa, 0x7f, 0x05, 0x37, 0xbb, 0xdd, 0x9b, 0xd9, 0x4a,
		0x63, 0x36, 0xcd, 0x01, 0x4c, 0x53, 0x69, 0xf0, 0xa0, 0xb6, 0x93, 0x86,
		0xce, 0x9d, 0xaa, 0x8f, 0xdc, 0x99, 0x9a, 0x90, 0xd9, 0x77, 0x68, 0x37,
		0xfe, 0xd4, 0x6f, 0xe7, 0xee, 0x7e, 0x53, 0xa5, 0x49, 0xfb, 0x16, 0x1c,
		0x0b, 0xb2, 0x56, 0x06, 0xfc, 0xf4, 0x8d, 0x0c, 0x33, 0x50, 0x5e, 0x2a,
		0x2e, 0x18, 0x66, 0xed, 0x7e, 0xd6, 0xbc, 0x6b, 0x1f, 0x42, 0xb1, 0x62,
		0x3e, 0xa1, 0x68, 0x98, 0x65, 0x95, 0x47, 0x6c, 0x62, 0x3b, 0x83, 0xcf,
		0x60, 0xb2, 0xfe, 0x9f, 0xd5, 0x5b, 0x90, 0xad, 0x20, 0x93, 0x80, 0x52,
		0xd2, 0xfd, 0x97, 0x05, 0x86, 0x2a, 0x6b, 0x29, 0xb6, 0xd6, 0x0e, 0xbe,
		0x03, 0x65, 0x36, 0x16, 0x0a, 0x53, 0x23, 0x91, 0xf2, 0x15, 0x2b, 0xf7,
		0x34, 0x0d, 0x01, 0x6a, 0xc5, 0x75, 0xa1, 0x18, 0x30, 0x6c, 0xe0, 0x6c,
		0xcc, 0x17, 0x3f, 0x8d, 0x98, 0x79, 0x41, 0x67, 0xd1, 0xf4, 0xcb, 0xd8,
		0xb3, 0x4a, 0x98, 0xed, 0x92, 0xbd, 0x53, 0x0c, 0x61, 0xc0, 0x0a, 0xbc,
		0x88, 0x6f, 0xde, 0x37, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0x31,
		0xac, 0x00, 0xd4, 0x01, 0x00, 0x00,
		},
		"content/put.txt",
	)
}

func content_stat_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x3c, 0x91,
		0xcd, 0x6e, 0xc3, 0x20, 0x10, 0x84, 0xef, 0x3c, 0xc5, 0x2a, 0x52, 0x8e,
		0xc5, 0xff, 0x71, 0x14, 0x55, 0xb9, 0xf6, 0x50, 0xe5, 0x96, 0xaa, 0x67,
		0x6c, 0xd6, 0x31, 0x2a, 0x66, 0x2d, 0xc0, 0x3d, 0xf4, 0xe9, 0xbb, 0xe0,
		0xb4, 0x92, 0x65, 0xe3, 0xfd, 0x66, 0x06, 0x31, 0x88, 0x37, 0x8c, 0x01,
		0x42, 0x54, 0xfc, 0xa6, 0x09, 0x14, 0x58, 0x7a, 0x00, 0x79, 0x98, 0xb7,
		0x41, 0x0a, 0x71, 0x9f, 0x4d, 0x80, 0x91, 0x96, 0x45, 0x39, 0x0d, 0xab,
		0x37, 0x8e, 0x55, 0x91, 0x20, 0xce, 0xc8, 0x16, 0x4d, 0x5b, 0xcc, 0x4b,
		0xe3, 0x26, 0xf2, 0x8b, 0x8a, 0x86, 0x1c, 0xf0, 0x93, 0x46, 0xcf, 0x14,
		0xfe, 0x24, 0xbf, 0x73, 0x38, 0x46, 0xd4, 0xc9, 0xaa, 0x52, 0x32, 0x3b,
		0xb2, 0x6a, 0xb7, 0x5d, 0x84, 0x98, 0x29, 0xc4, 0xea, 0xd2, 0x95, 0x65,
		0x59, 0x41, 0x57, 0xd5, 0xef, 0x43, 0x51, 0xdd, 0x06, 0xe8, 0x4a, 0x59,
		0x96, 0xc7, 0x0c, 0xeb, 0x0c, 0x1b, 0xa8, 0x6f, 0x43, 0xd1, 0x26, 0xd4,
		0xcb, 0xaa, 0xdf, 0x51, 0x93, 0x51, 0x07, 0x3c, 0x2e, 0xaa, 0x13, 0xb3,
		0xba, 0x97, 0xa7, 0xf3, 0xce, 0xda, 0xcc, 0x6a, 0xe0, 0xb4, 0xa2, 0x7e,
		0x26, 0x76, 0x3b, 0xea, 0x32, 0x6a, 0x33, 0x3a, 0x33, 0xaa, 0x5a, 0xd9,
		0xb6, 0x47, 0x71, 0xa7, 0xa8, 0x2c, 0x34, 0xe7, 0x14, 0x56, 0xd6, 0x0d,
		0x83, 0x46, 0xf6, 0xbc, 0x93, 0xf8, 0x9c, 0xd1, 0x23, 0xa0, 0x1a, 0x67,
		0xb0, 0xc6, 0xf1, 0xa1, 0xc3, 0x45, 0xbc, 0xa6, 0x63, 0x2a, 0xad, 0x3d,
		0x86, 0x70, 0x85, 0xfc, 0x17, 0xcc, 0x0f, 0x5e, 0x8b, 0x7d, 0x49, 0x53,
		0x64, 0xed, 0x62, 0x22, 0xb3, 0x15, 0xfd, 0x88, 0x2e, 0xc2, 0xb4, 0x59,
		0x7b, 0x15, 0xe2, 0x23, 0x18, 0xf7, 0x48, 0x85, 0xbf, 0x44, 0xbf, 0x05,
		0x1e, 0x5b, 0xf5, 0x48, 0xad, 0xac, 0x9e, 0xf4, 0x36, 0xe6, 0x26, 0x17,
		0xd2, 0xdc, 0xf2, 0x4c, 0x9b, 0xd5, 0x30, 0x20, 0xa8, 0x6f, 0x32, 0x1a,
		0xb5, 0x84, 0x7c, 0x27, 0x59, 0x4f, 0x2b, 0xba, 0xf0, 0x5f, 0xf7, 0xf3,
		0x5e, 0x0e, 0x0b, 0xba, 0xbf, 0x7e, 0x17, 0xa3, 0xb5, 0xc5, 0x03, 0xa8,
		0x18, 0xd5, 0xf8, 0x25, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x44, 0xf0,
		0x27, 0x67, 0xec, 0x01, 0x00, 0x00,
		},
		"content/stat.txt",
	)
}

func content_truncate_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x5c, 0x52,
		0x41, 0x92, 0x14, 0x21, 0x10, 0xbc, 0xf7, 0x2b, 0x32, 0x38, 0x69, 0xc4,
		0x4c, 0xc7, 0xba, 0xee, 0x5e, 0xbc, 0x79, 0xd1, 0x0f, 0x8c, 0xde, 0xe9,
		0xa6, 0x7a, 0x20, 0x04, 0xaa, 0xa5, 0x60, 0x76, 0xe7, 0x61, 0x7e, 0xc0,
		0x97, 0x59, 0x30, 0x13, 0x6a, 0xec, 0x85, 0x26, 0xa8, 0xac, 0xcc, 0xac,
		0xac, 0x9e, 0x4e, 0xa5, 0xe5, 0xd5, 0x56, 0x12, 0x58, 0x44, 0x3e, 0x83,
		0x0b, 0x7c, 0x5b, 0xe6, 0x69, 0x3a, 0x79, 0xc2, 0x31, 0x86, 0x04, 0xd9,
		0x69, 0x0d, 0x5b, 0x18, 0x08, 0xd7, 0x8a, 0xad, 0x81, 0x33, 0x0a, 0x45,
		0xbd, 0x5c, 0x08, 0x95, 0x51, 0x15, 0xb9, 0xb6, 0x52, 0x28, 0x57, 0x24,
		0x4e, 0xfd, 0xb3, 0xd0, 0xc6, 0x85, 0xf0, 0xe2, 0xc3, 0xea, 0xa1, 0x0f,
		0x65, 0xb4, 0x97, 0x01, 0x5f, 0x48, 0xbb, 0x13, 0x5f, 0xc8, 0xcd, 0xf8,
		0xa2, 0x72, 0xf4, 0x6a, 0xd3, 0x1e, 0xe9, 0xd0, 0x6b, 0xb7, 0x02, 0x6c,
		0x8c, 0x7f, 0xbb, 0x38, 0x3a, 0x2a, 0xaa, 0x61, 0x73, 0xd7, 0xb7, 0xd7,
		0xc3, 0xdd, 0xd0, 0x15, 0xc7, 0xc7, 0x27, 0xff, 0xbf, 0xd1, 0xd4, 0xa4,
		0x2b, 0x2b, 0xec, 0x2b, 0xff, 0x73, 0x2a, 0x4a, 0x93, 0xcf, 0x9f, 0x60,
		0x3e, 0xbf, 0x7d, 0x43, 0xe8, 0x23, 0xed, 0x2c, 0x12, 0x96, 0x78, 0x85,
		0x84, 0x73, 0x26, 0x07, 0xa1, 0x9f, 0x8d, 0xf2, 0x4a, 0xe0, 0x0d, 0x4e,
		0x85, 0x92, 0x8d, 0xc8, 0x2d, 0x2d, 0x54, 0xe4, 0x00, 0xb2, 0x3a, 0xcf,
		0x4b, 0xa8, 0x1e, 0xbc, 0x77, 0x26, 0xad, 0x6d, 0xc5, 0xae, 0x83, 0xd4,
		0x66, 0xa7, 0x74, 0x2d, 0x87, 0x0a, 0x69, 0xdb, 0x16, 0x5e, 0xd5, 0x69,
		0x53, 0xb8, 0x15, 0x98, 0x8f, 0x0f, 0x0f, 0x49, 0xcc, 0x01, 0xe6, 0xf8,
		0x61, 0x7e, 0xf6, 0xa6, 0xa7, 0x6c, 0x1e, 0xfd, 0xd3, 0x73, 0x32, 0x33,
		0xbe, 0xdb, 0x18, 0x1c, 0x6a, 0x48, 0x34, 0x9a, 0x6f, 0x39, 0x99, 0x3c,
		0xe0, 0x4d, 0x0c, 0xde, 0x75, 0xf0, 0xef, 0x5f, 0x62, 0xde, 0xeb, 0xc3,
		0x8d, 0x65, 0x1c, 0xa9, 0x1f, 0xde, 0xcc, 0x66, 0x9a, 0xbe, 0x49, 0x1f,
		0x47, 0x0d, 0x1f, 0x6b, 0xe9, 0x21, 0x6c, 0xd1, 0xea, 0x74, 0x19, 0x7b,
		0x61, 0xd7, 0x6e, 0xee, 0x12, 0x3b, 0x82, 0x78, 0x6e, 0xd1, 0x8d, 0x8c,
		0x2e, 0x1c, 0x5c, 0xdf, 0xc0, 0xc9, 0x6b, 0x0a, 0x03, 0xcf, 0x3b, 0x65,
		0x19, 0xcb, 0xec, 0xff, 0xc1, 0x7d, 0xaf, 0x46, 0xd7, 0xd9, 0x99, 0xfa,
		0x3d, 0x05, 0xe7, 0x22, 0x19, 0xd8, 0x5a, 0xed, 0xfa, 0x63, 0xfe, 0x13,
		0x00, 0x00, 0xff, 0xff, 0x2c, 0xdd, 0x4c, 0xc1, 0x3b, 0x02, 0x00, 0x00,
		},
		"content/truncate.txt",
	)
}

func content_ui_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x44, 0x8e,
		0x51, 0x0e, 0x83, 0x30, 0x0c, 0x43, 0xff, 0x39, 0x85, 0x0f, 0x00, 0xec,
		0x1a, 0xdb, 0xdf, 0x24, 0xb8, 0x40, 0x28, 0x66, 0x54, 0x03, 0xda, 0xa5,
		0x61, 0x12, 0xb7, 0x5f, 0xa9, 0x84, 0xf6, 0x13, 0x25, 0x96, 0xfd, 0xe2,
		0xaa, 0x33, 0x51, 0x4b, 0x58, 0xc2, 0x6b, 0xde, 0x07, 0xf8, 0x0d, 0x36,
		0x13, 0xbb, 0xc7, 0x1a, 0x46, 0xb6, 0x55, 0xf5, 0x38, 0x05, 0x9f, 0xca,
		0x79, 0x99, 0xc4, 0x39, 0xc6, 0x9c, 0xb9, 0xf7, 0xfd, 0xf3, 0x76, 0x8e,
		0x0e, 0xca, 0xcf, 0xce, 0x94, 0x35, 0xb1, 0x02, 0x88, 0x41, 0x0d, 0x29,
		0xd2, 0xf9, 0xc9, 0x73, 0xbc, 0xb0, 0xcd, 0x6c, 0x16, 0x11, 0x45, 0x65,
		0xa5, 0x51, 0x4f, 0xfc, 0x84, 0xc6, 0x31, 0x7b, 0x65, 0x1b, 0xd1, 0xbc,
		0x79, 0x40, 0x94, 0xff, 0x60, 0x7d, 0xb5, 0xc9, 0x0d, 0xe4, 0x2b, 0x7e,
		0x91, 0x61, 0x21, 0x86, 0xa3, 0xbc, 0xee, 0x6a, 0x6c, 0xc1, 0xca, 0xda,
		0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x72, 0x80, 0x93, 0x72, 0xc7, 0x00,
		0x00, 0x00,
		},
		"content/ui.txt",
	)
}

func content_user_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x44, 0x90,
		0x41, 0x6e, 0xf4, 0x20, 0x0c, 0x85, 0xf7, 0x9c, 0xc2, 0x9a, 0xe5, 0xaf,
		0xf9, 0xe7, 0x00, 0xb3, 0xef, 0xb2, 0xbb, 0xf6, 0x00, 0x0e, 0x76, 0x12,
		0x54, 0xc0, 0x08, 0x9b, 0x99, 0xeb, 0xd7, 0x24, 0x91, 0xba, 0xe2, 0x61,
		0x9e, 0x9e, 0xdf, 0x47, 0xf8, 0xc4, 0x8a, 0x1b, 0x2b, 0x0c, 0xe5, 0x0e,
		0x5d, 0x32, 0xeb, 0x23, 0x84, 0xaf, 0x3d, 0x29, 0x44, 0x29, 0x05, 0x2b,
		0x41, 0xec, 0x8c, 0xe6, 0x0e, 0xe9, 0x30, 0x1a, 0x1d, 0x12, 0x4f, 0xbb,
		0xbc, 0xb8, 0xf7, 0x44, 0xa9, 0x6e, 0x90, 0x4c, 0x21, 0x27, 0x35, 0x90,
		0xf5, 0x4a, 0x81, 0x0f, 0x8c, 0xfb, 0xa9, 0x81, 0x2b, 0x2e, 0xf3, 0xc4,
		0x18, 0x59, 0x15, 0x4c, 0x3c, 0xa1, 0x8e, 0xb2, 0xcc, 0x8c, 0x15, 0xb2,
		0x6c, 0xfb, 0x58, 0xfc, 0xd1, 0x92, 0xd4, 0x73, 0x3d, 0xc3, 0x2a, 0x39,
		0xcb, 0x7b, 0x46, 0x9f, 0x11, 0xd8, 0x19, 0x74, 0xb4, 0x26, 0xdd, 0x98,
		0x9e, 0x21, 0xfc, 0x03, 0xaf, 0x45, 0xdc, 0x9f, 0xb0, 0xb1, 0xdd, 0xa1,
		0xa1, 0xaa, 0xcf, 0xde, 0x3d, 0xd9, 0x9c, 0xb5, 0xf1, 0x37, 0x43, 0x2a,
		0xa9, 0x5e, 0x36, 0xeb, 0xa3, 0x46, 0x47, 0xb8, 0x83, 0x1a, 0xfa, 0x7d,
		0x62, 0x5c, 0xc6, 0xf0, 0xad, 0x73, 0x9b, 0xf7, 0xf9, 0xef, 0x2e, 0x27,
		0x59, 0x33, 0x3a, 0x57, 0x85, 0xd6, 0x85, 0xc6, 0xd1, 0x0d, 0x8a, 0x90,
		0xb7, 0xd8, 0x65, 0x64, 0x82, 0x85, 0x01, 0x5f, 0x92, 0x88, 0xe9, 0x01,
		0xc7, 0x7f, 0x1d, 0x7e, 0x69, 0x5c, 0x1d, 0xd0, 0x01, 0x9c, 0x6a, 0x82,
		0x4e, 0x79, 0x2b, 0x5c, 0x67, 0xd2, 0xd4, 0x25, 0x11, 0x65, 0xbe, 0x01,
		0x9a, 0x61, 0xfc, 0x79, 0xfc, 0x06, 0x00, 0x00, 0xff, 0xff, 0x94, 0xc5,
		0xd6, 0xdb, 0x80, 0x01, 0x00, 0x00,
		},
		"content/user.txt",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"content/get.txt": content_get_txt,
	"content/help.txt": content_help_txt,
	"content/hub.txt": content_hub_txt,
	"content/log.txt": content_log_txt,
	"content/pass.txt": content_pass_txt,
	"content/put.txt": content_put_txt,
	"content/stat.txt": content_stat_txt,
	"content/truncate.txt": content_truncate_txt,
	"content/ui.txt": content_ui_txt,
	"content/user.txt": content_user_txt,

}
